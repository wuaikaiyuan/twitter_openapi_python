# coding: utf-8

"""
    Twitter OpenAPI

    Twitter OpenAPI(Swagger) specification

    The version of the OpenAPI document: 0.0.1
    Contact: yuki@yuki0311.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from twitter_openapi_python_generated.models.tweet_card import TweetCard

class TestTweetCard(unittest.TestCase):
    """TweetCard unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TweetCard:
        """Test TweetCard
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TweetCard`
        """
        model = TweetCard()
        if include_optional:
            return TweetCard(
                legacy = twitter_openapi_python_generated.models.tweet_card_legacy.TweetCardLegacy(
                    binding_values = [
                        twitter_openapi_python_generated.models.tweet_card_legacy_binding_value.TweetCardLegacyBindingValue(
                            key = '', 
                            value = twitter_openapi_python_generated.models.tweet_card_legacy_binding_value_data.TweetCardLegacyBindingValueData(
                                boolean_value = True, 
                                image_color_value = { }, 
                                image_value = twitter_openapi_python_generated.models.tweet_card_legacy_binding_value_data_image.TweetCardLegacyBindingValueDataImage(
                                    alt = '', 
                                    height = 56, 
                                    url = '', 
                                    width = 56, ), 
                                scribe_key = '', 
                                string_value = '', 
                                type = '', 
                                user_value = twitter_openapi_python_generated.models.user_value.UserValue(
                                    id_str = '4', ), ), )
                        ], 
                    card_platform = twitter_openapi_python_generated.models.tweet_card_platform_data.TweetCardPlatformData(
                        platform = twitter_openapi_python_generated.models.tweet_card_platform.TweetCardPlatform(
                            audience = twitter_openapi_python_generated.models.tweet_card_platform_audience.TweetCardPlatformAudience(
                                name = 'production', ), 
                            device = twitter_openapi_python_generated.models.tweet_card_platform_device.TweetCardPlatformDevice(
                                name = '', 
                                version = '4', ), ), ), 
                    name = '', 
                    url = '', 
                    user_refs_results = [
                        twitter_openapi_python_generated.models.user_results.UserResults(
                            result = null, )
                        ], ),
                rest_id = ''
            )
        else:
            return TweetCard(
        )
        """

    def testTweetCard(self):
        """Test TweetCard"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
